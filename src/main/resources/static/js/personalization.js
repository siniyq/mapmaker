/**
 * –ú–æ–¥—É–ª—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
class PersonalizationModule {
    constructor() {
        this.userProfile = null;
        this.isAuthenticated = false;
        this.weatherData = null;
        this.daytime = this.getDaytime();
        
        // API –∫–ª—é—á –¥–ª—è OpenWeatherMap
        this.weatherApiKey = "5f472b7acba333cd8a035ea85a0d4d4c"; // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.cityCoordinates = { lat: 55.19, lon: 30.20 }; // –í–∏—Ç–µ–±—Å–∫
        
        this.init();
    }
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.setupEventListeners();
        this.loadWeatherData();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
        this.checkAuthStatus();
        setInterval(() => this.checkAuthStatus(), 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        
        this.updateRecommendationsByDaytime();
    }
    
    setupEventListeners() {
        // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ª–æ–≥–∏–Ω–∞, —Ç.–∫. –æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ onclick –∞—Ç—Ä–∏–±—É—Ç
        
        if (document.getElementById('logout')) {
            document.getElementById('logout').addEventListener('click', () => this.logout());
        }
        
        if (document.getElementById('saved-routes')) {
            document.getElementById('saved-routes').addEventListener('click', () => this.showSavedRoutes());
        }
        
        if (document.getElementById('preferences')) {
            document.getElementById('preferences').addEventListener('click', () => this.showPreferences());
        }
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–∞—Ä—à—Ä—É—Ç–∞
        const durationSelect = document.getElementById('route-duration');
        const paceRadios = document.querySelectorAll('input[name="route-pace"]');
        
        if (durationSelect) {
            durationSelect.addEventListener('change', () => {
                this.updateRouteParameters();
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                this.updateRecommendations();
            });
        }
        
        paceRadios.forEach(radio => {
            radio.addEventListener('change', () => {
                this.updateRouteParameters();
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ç–µ–º–ø–∞
                this.updateRecommendations();
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
        const weatherBox = document.getElementById('weather-box');
        if (weatherBox) {
            const refreshButton = document.createElement('button');
            refreshButton.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É';
            refreshButton.style.cssText = 'margin-top: 10px; font-size: 0.85em; padding: 5px; width: 100%; background-color: var(--background); border: none; border-radius: 5px; cursor: pointer; box-shadow: 3px 3px 6px var(--shadow-dark), -3px -3px 6px var(--shadow-light); transition: all 0.3s; color: var(--text-color);';
            
            refreshButton.addEventListener('mouseenter', function() {
                this.style.boxShadow = '2px 2px 4px var(--shadow-dark), -2px -2px 4px var(--shadow-light)';
            });
            
            refreshButton.addEventListener('mouseleave', function() {
                this.style.boxShadow = '3px 3px 6px var(--shadow-dark), -3px -3px 6px var(--shadow-light)';
            });
            
            refreshButton.addEventListener('click', () => {
                this.loadWeatherData();
                refreshButton.textContent = 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
                refreshButton.disabled = true;
                setTimeout(() => {
                    refreshButton.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É';
                    refreshButton.disabled = false;
                }, 2000);
            });
            weatherBox.appendChild(refreshButton);
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    getDaytime() {
        const hours = new Date().getHours();
        
        if (hours >= 5 && hours < 12) return 'morning';
        if (hours >= 12 && hours < 17) return 'day';
        if (hours >= 17 && hours < 22) return 'evening';
        return 'night';
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadWeatherData() {
        const { lat, lon } = this.cityCoordinates;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        document.getElementById('weather-temp').textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        document.getElementById('weather-icon').textContent = 'üîÑ';
        
        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${this.weatherApiKey}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('–ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
                this.weatherData = data;
                this.updateWeatherUI();
                this.updateRecommendations();
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–≥–æ–¥—ã:', error);
                document.getElementById('weather-temp').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É';
                document.getElementById('weather-icon').textContent = '‚ö†Ô∏è';
                document.getElementById('weather-description').textContent = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                this.useWeatherFallback();
            });
    }
    
    // –ó–∞–≥–ª—É—à–∫–∞ —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    useWeatherFallback() {
        this.weatherData = {
            main: { temp: 15 },
            weather: [{ id: 800, description: '—è—Å–Ω–æ', icon: '01d' }]
        };
        this.updateWeatherUI();
        this.updateRecommendations();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    updateWeatherUI() {
        if (!this.weatherData) return;
        
        const temp = Math.round(this.weatherData.main.temp);
        const description = this.weatherData.weather[0].description;
        const weatherIcon = this.getWeatherIcon(this.weatherData.weather[0].icon);
        
        document.getElementById('weather-icon').textContent = weatherIcon;
        document.getElementById('weather-temp').textContent = `${temp}¬∞C`;
        document.getElementById('weather-description').textContent = description.charAt(0).toUpperCase() + description.slice(1);
    }
    
    // –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–¥—É –ø–æ–≥–æ–¥—ã —Å OpenWeatherMap
    getWeatherIcon(iconCode) {
        const iconMap = {
            '01d': '‚òÄÔ∏è',
            '01n': 'üåô',
            '02d': 'üå§Ô∏è',
            '02n': '‚òÅÔ∏è',
            '03d': '‚òÅÔ∏è',
            '03n': '‚òÅÔ∏è',
            '04d': '‚òÅÔ∏è',
            '04n': '‚òÅÔ∏è',
            '09d': 'üåßÔ∏è',
            '09n': 'üåßÔ∏è',
            '10d': 'üå¶Ô∏è',
            '10n': 'üåßÔ∏è',
            '11d': '‚õàÔ∏è',
            '11n': '‚õàÔ∏è',
            '13d': '‚ùÑÔ∏è',
            '13n': '‚ùÑÔ∏è',
            '50d': 'üå´Ô∏è',
            '50n': 'üå´Ô∏è'
        };
        
        return iconMap[iconCode] || 'üå°Ô∏è';
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã
    updateRecommendations() {
        if (!this.weatherData) return;
        
        const temp = this.weatherData.main.temp;
        const weatherId = this.weatherData.weather[0].id;
        const isRainyOrSnowy = weatherId >= 200 && weatherId < 700;
        const isCold = temp < 5;
        const isHot = temp > 25;
        
        let recommendation = '';
        let typeRecommendation = '';
        
        // –ü–æ –ø–æ–≥–æ–¥–µ
        if (isRainyOrSnowy) {
            recommendation = '–ü–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–µ—Å—Ç–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏—è—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã.';
            typeRecommendation = 'cafe,restaurant,museum';
        } else if (isCold) {
            recommendation = '–•–æ–ª–æ–¥–Ω–æ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–ø–ª—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã.';
            typeRecommendation = 'cafe,restaurant,museum,mall';
        } else if (isHot) {
            recommendation = '–ñ–∞—Ä–∫–æ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–∞—Ä–∫–∏, —Ç–µ–Ω–∏—Å—Ç—ã–µ –º–µ—Å—Ç–∞ –∏ –ø—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏.';
            typeRecommendation = 'park,cafe,ice_cream';
        } else {
            recommendation = '–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!';
            typeRecommendation = '';
        }
        
        // –°–æ—á–µ—Ç–∞–µ–º —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å—É—Ç–æ–∫
        this.updateRecommendationsByDaytime(typeRecommendation);
        
        document.getElementById('weather-recommendation').textContent = recommendation;
    }
    
    updateRecommendationsByDaytime(additionalTypes = '') {
        let recommendedTypes = [];
        let message = '';
        
        switch (this.daytime) {
            case 'morning':
                recommendedTypes = ['cafe', 'bakery', 'restaurant'];
                message = '–£—Ç—Ä–æ - –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –∏–ª–∏ –∫–æ—Ñ–µ!';
                break;
            case 'day':
                recommendedTypes = ['restaurant', 'park', 'museum', 'mall'];
                message = '–î–µ–Ω—å - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –∏ –æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.';
                break;
            case 'evening':
                recommendedTypes = ['restaurant', 'bar', 'viewpoint', 'night_club'];
                message = '–í–µ—á–µ—Ä - –≤—Ä–µ–º—è –¥–ª—è —É–∂–∏–Ω–∞ –∏–ª–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!';
                break;
            case 'night':
                recommendedTypes = ['bar', 'night_club'];
                message = '–ù–æ—á—å - –º–æ–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–æ—á–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.';
                break;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º POI –∏–∑ –ø–æ–≥–æ–¥—ã
        if (additionalTypes) {
            const additionalTypesArr = additionalTypes.split(',');
            recommendedTypes = [...new Set([...recommendedTypes, ...additionalTypesArr])];
        }
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        this.highlightRecommendedTypes(recommendedTypes);
    }
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ UI
    highlightRecommendedTypes(types) {
        // –°–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('#poi-buttons button').forEach(btn => {
            btn.style.border = '1px solid #777';
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
        types.forEach(type => {
            const button = document.getElementById(`poi-${type}`);
            if (button) {
                button.style.border = '2px solid #42a5f5';
                button.title = '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã';
            }
        });
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    updateRouteParameters() {
        const duration = parseInt(document.getElementById('route-duration').value);
        const pace = document.querySelector('input[name="route-pace"]:checked').value;
        
        // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
        let poiCount;
        let speed;
        let averageTimeAtPoi; // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Ç–æ—á–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        if (pace === 'relaxed') {
            speed = 3; // –∫–º/—á –¥–ª—è —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ–º–ø–∞
            averageTimeAtPoi = 20; // –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ —Ç–æ—á–∫–∞—Ö –¥–ª—è —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ–º–ø–∞
        } else {
            speed = 5; // –∫–º/—á –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–º–ø–∞
            averageTimeAtPoi = 12; // –ú–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–º–ø–∞
        }
        
        if (duration === 0) {
            // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            poiCount = 5;
        } else {
            // –§–æ—Ä–º—É–ª–∞ —Å —É—á–µ—Ç–æ–º:
            // - –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
            // - –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–æ—Ä–æ–≥—É –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 1-2 –∫–º –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏)
            // - –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (averageTimeAtPoi)
            // –î–æ–ø—É—Å—Ç–∏–º, —Å—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ 1.5 –∫–º
            const avgDistanceBetweenPois = 1.5; // –∫–º
            const timeForMovement = avgDistanceBetweenPois / speed * 60; // –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
            
            // –í—Ä–µ–º—è –Ω–∞ –æ–¥–Ω—É —Ç–æ—á–∫—É = –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É + –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
            const timePerPoi = timeForMovement + averageTimeAtPoi;
            
            // –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
            poiCount = Math.max(3, Math.min(10, Math.floor(duration / timePerPoi)));
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–∞–π–¥–µ—Ä–µ
        const poiCountSlider = document.getElementById('poi-count');
        if (poiCountSlider) {
            poiCountSlider.value = poiCount;
            document.getElementById('poi-count-value').textContent = poiCount;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
            poiCountSlider.style.transition = 'box-shadow 0.3s';
            poiCountSlider.style.boxShadow = '0 0 5px #4285f4';
            setTimeout(() => {
                poiCountSlider.style.boxShadow = 'none';
            }, 1000);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ–º–ø–∞
        this.updateRecommendationsByDaytime();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–∞—Ä—à—Ä—É—Ç–∞
        const durationText = duration === 0 ? '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' : `${duration} –º–∏–Ω`;
        const routeTypeElement = document.getElementById('route-type');
        if (routeTypeElement) {
            routeTypeElement.textContent = `–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (${pace === 'relaxed' ? '—Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–π' : '–∞–∫—Ç–∏–≤–Ω—ã–π'} —Ç–µ–º–ø)`;
            routeTypeElement.style.color = pace === 'relaxed' ? '#4CAF50' : '#FF9800';
        }
        
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞: —Ç–µ–º–ø=${pace}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å=${durationText}, —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞=${poiCount}`);
    }
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª—å
    showLoginModal() {
        // –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑ –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.authModule) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–º–æ—Ä—Ñ–∏–∑–º–∞
            if (typeof window.authModule.showNeoAuthModal === 'function') {
                window.authModule.showNeoAuthModal();
            } else {
                window.authModule.showAuthModal();
            }
        } else {
            alert('–ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    logout() {
        this.isAuthenticated = false;
        this.userProfile = null;
        document.getElementById('user-profile').style.display = 'none';
        document.getElementById('auth-container').style.display = 'block';
    }
    
    checkAuthStatus() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ localStorage –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏
        const userDataStr = localStorage.getItem('userData');
        
        if (userDataStr) {
            try {
                const userData = JSON.parse(userDataStr);
                this.isAuthenticated = true;
                this.userProfile = userData;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                const userProfile = document.getElementById('user-profile');
                const authContainer = document.getElementById('auth-container');
                const userName = document.getElementById('user-name');
                
                if (userProfile) userProfile.style.display = 'block';
                if (authContainer) authContainer.style.display = 'none';
                if (userName) {
                    let displayName = userData.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                    if (userData.firstName && userData.firstName.trim() !== '') {
                        displayName = userData.firstName;
                        if (userData.lastName && userData.lastName.trim() !== '') {
                            displayName += ' ' + userData.lastName;
                        }
                    }
                    userName.textContent = displayName;
                }
                
                console.log('PersonalizationModule: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', userData.username);
                return true;
            } catch (e) {
                console.error('PersonalizationModule: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
                this.isAuthenticated = false;
                this.userProfile = null;
            }
        } else {
            this.isAuthenticated = false;
            this.userProfile = null;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
            const userProfile = document.getElementById('user-profile');
            const authContainer = document.getElementById('auth-container');
            
            if (userProfile) userProfile.style.display = 'none';
            if (authContainer) authContainer.style.display = 'block';
        }
        
        return this.isAuthenticated;
    }
    
    loadUserProfile() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        this.userProfile = {
            name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            preferences: {
                liked: ['cafe', 'restaurant'],
                disliked: ['fast_food']
            },
            savedRoutes: []
        };
        
        document.getElementById('user-name').textContent = this.userProfile.name;
    }
    
    showSavedRoutes() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (!this.isAuthenticated) {
            NeoDialog.alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã', '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ —É–∂–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (document.getElementById('saved-routes-modal')) {
            console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ');
            document.body.removeChild(document.getElementById('saved-routes-modal'));
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = this.userProfile.id;
        
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingDiv = document.createElement('div');
        loadingDiv.id = 'routes-loading-indicator';
        loadingDiv.className = 'neo-modal-container';
        loadingDiv.innerHTML = `
            <div style="
                background-color: var(--background);
                padding: 20px;
                border-radius: 15px;
                box-shadow: 10px 10px 20px var(--shadow-dark), -10px -10px 20px var(--shadow-light);
                text-align: center;
            ">
                <div style="
                    border: 4px solid var(--shadow-dark);
                    border-top: 4px solid var(--accent-color);
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    margin: 0 auto 15px auto;
                    animation: spin 1s linear infinite;
                "></div>
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...</div>
            </div>
        `;
        document.body.appendChild(loadingDiv);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        fetch(`/api/users/${userId}/routes`)
            .then(response => {
                console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
                    });
                }
                return response.json();
            })
            .then(routes => {
                console.log('–ü–æ–ª—É—á–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã:', routes);
                
                // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                if (document.getElementById('routes-loading-indicator')) {
                    document.body.removeChild(document.getElementById('routes-loading-indicator'));
                }
                
                // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ—Ç
                if (!routes || routes.length === 0) {
                    NeoDialog.alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã', '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤');
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
                const modalContainer = document.createElement('div');
                modalContainer.id = 'saved-routes-modal';
                modalContainer.className = 'neo-modal-container';
                
                // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                let routesHTML = '';
                routes.forEach(route => {
                    const date = new Date(route.createdAt).toLocaleDateString('ru-RU');
                    const time = new Date(route.createdAt).toLocaleTimeString('ru-RU');
                    const profileText = route.profile === 'foot' ? '–ü–µ—à–∫–æ–º' : 
                                        route.profile === 'bike' ? '–í–µ–ª–æ—Å–∏–ø–µ–¥' : '–ê–≤—Ç–æ–º–æ–±–∏–ª—å';
                    const profileColor = route.profile === 'foot' ? 'var(--accent-color)' : 
                                       route.profile === 'bike' ? 'var(--success-color)' : 'var(--danger-color)';
                    
                    routesHTML += `
                        <div class="saved-route-item" data-id="${route.id}" style="
                            padding: 15px;
                            margin-bottom: 20px;
                            background-color: var(--background);
                            border-radius: 15px;
                            box-shadow: 5px 5px 10px var(--shadow-dark), -5px -5px 10px var(--shadow-light);
                            overflow: hidden;
                            position: relative;
                        ">
                            <div style="position: absolute; left: 0; top: 0; bottom: 0; width: 6px; background-color: ${profileColor};"></div>
                            
                            <div style="padding-left: 10px;">
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                                    <h3 style="margin: 0; font-size: 1.2em; color: var(--accent-color);">${route.name}</h3>
                                    <span style="font-size: 0.85em; color: #666;">${date} ${time}</span>
                                </div>
                                
                                <div style="display: flex; justify-content: space-between; margin-bottom: 10px; color: var(--text-color);">
                                    <span>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>${route.distance.toFixed(2)} –∫–º</b></span>
                                    <span>–í—Ä–µ–º—è: <b>${route.duration} –º–∏–Ω.</b></span>
                                    <span>–¢–∏–ø: <b>${profileText}</b></span>
                                </div>
                                
                                <div style="margin-top: 15px; display: flex; justify-content: space-between; gap: 10px;">
                                    <button class="show-route-btn neo-button" style="
                                        flex: 1;
                                        background-color: var(--accent-color);
                                        color: white;
                                        text-align: center;
                                        margin-bottom: 0;
                                    ">–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</button>
                                    
                                    <button class="delete-route-btn neo-button" style="
                                        flex: 1;
                                        background-color: var(--danger-color);
                                        color: white;
                                        text-align: center;
                                        margin-bottom: 0;
                                    ">–£–¥–∞–ª–∏—Ç—å</button>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                modalContainer.innerHTML = `
                    <div class="neo-modal">
                        <div class="neo-modal-header">
                            <h2>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</h2>
                            <button id="close-routes-modal" class="neo-close-button">&times;</button>
                        </div>
                        
                        <div id="saved-routes-list">
                            ${routesHTML}
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modalContainer);
                
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                const closeModal = () => {
                    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤');
                    // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑ DOM
                    if (document.getElementById('saved-routes-modal')) {
                        document.body.removeChild(document.getElementById('saved-routes-modal'));
                    }
                };

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É X
                const closeButton = document.getElementById('close-routes-modal');
                if (closeButton) {
                    console.log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è');
                    
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ–π
                    const newCloseButton = document.createElement('button');
                    newCloseButton.id = 'close-routes-modal';
                    newCloseButton.className = 'neo-close-button';
                    newCloseButton.innerHTML = '&times;';
                    newCloseButton.style.cursor = 'pointer';
                    newCloseButton.style.fontWeight = 'bold';
                    newCloseButton.style.fontSize = '24px';
                    
                    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ–π
                    closeButton.parentNode.replaceChild(newCloseButton, closeButton);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
                    newCloseButton.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∞!');
                        closeModal();
                    });
                }

                // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                modalContainer.onclick = function(e) {
                    if (e.target === modalContainer) {
                        e.preventDefault();
                        e.stopPropagation();
                        closeModal();
                        return false;
                    }
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                const escHandler = (e) => {
                    if (e.key === 'Escape') {
                        closeModal();
                        document.removeEventListener('keydown', escHandler);
                    }
                };
                document.addEventListener('keydown', escHandler);
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                const showButtons = modalContainer.querySelectorAll('.show-route-btn');
                const deleteButtons = modalContainer.querySelectorAll('.delete-route-btn');
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞
                showButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        const routeItem = e.target.closest('.saved-route-item');
                        const routeId = routeItem.dataset.id;
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        closeModal();
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
                        this.loadAndDisplayRoute(userId, routeId);
                    });
                });
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
                deleteButtons.forEach(button => {
                    button.addEventListener('click', async (e) => {
                        const routeItem = e.target.closest('.saved-route-item');
                        const routeId = routeItem.dataset.id;
                        const routeName = routeItem.querySelector('h3').textContent;
                        
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try {
                            const confirmResult = await new Promise(resolve => {
                                NeoDialog.confirm('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è', `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç "${routeName}"?`, result => {
                                    resolve(result);
                                });
                            });
                            
                            if (confirmResult === true) {
                                this.deleteRoute(userId, routeId, routeItem);
                            } else {
                                console.log('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                            }
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                            NeoDialog.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç');
                        }
                    });
                });
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:', error);
                
                // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                if (document.getElementById('routes-loading-indicator')) {
                    document.body.removeChild(document.getElementById('routes-loading-indicator'));
                }
                
                NeoDialog.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${error.message}`);
            });
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    loadAndDisplayRoute(userId, routeId) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingDiv = document.createElement('div');
        loadingDiv.id = 'route-loading-indicator';
        loadingDiv.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px;
            border-radius: 10px;
            z-index: 1000;
            text-align: center;
        `;
        loadingDiv.innerHTML = `
            <div style="
                border: 4px solid rgba(255, 255, 255, 0.3);
                border-top: 4px solid white;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                margin: 0 auto 15px auto;
                animation: spin 1s linear infinite;
            "></div>
            <div>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞...</div>
        `;
        document.body.appendChild(loadingDiv);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
        fetch(`/api/users/${userId}/routes/${routeId}`)
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞');
                    });
                }
                return response.json();
            })
            .then(routeData => {
                try {
                    // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    if (document.getElementById('route-loading-indicator')) {
                        document.body.removeChild(document.getElementById('route-loading-indicator'));
                    }
                    
                    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞:', routeData);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ
                    let routePoints = [];
                    
                    try {
                        if (routeData.routeData) {
                            const parsedRouteData = JSON.parse(routeData.routeData);
                            if (parsedRouteData && parsedRouteData.points && Array.isArray(parsedRouteData.points)) {
                                routePoints = parsedRouteData.points;
                            }
                        }
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ routeData:', e);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
                    if (!routePoints || routePoints.length === 0) {
                        console.log('–í –º–∞—Ä—à—Ä—É—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ—á–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–∫–∏ POI');
                        
                        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–∫–∏ POI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
                        if (routeData.points && routeData.points.length > 0) {
                            routePoints = routeData.points.map(point => [point.lat || point.latitude, point.lng || point.longitude]);
                        } else {
                            throw new Error('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–µ–∫');
                        }
                    }
                    
                    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    const validRoutePoints = [];
                    for (const point of routePoints) {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–æ—á–µ–∫
                        if (Array.isArray(point) && point.length >= 2) {
                            // –§–æ—Ä–º–∞—Ç [lat, lng]
                            if (typeof point[0] === 'number' && typeof point[1] === 'number') {
                                validRoutePoints.push(L.latLng(point[0], point[1]));
                            }
                        } else if (typeof point === 'object') {
                            // –§–æ—Ä–º–∞—Ç {lat, lng} –∏–ª–∏ {latitude, longitude}
                            let lat = null, lng = null;
                            
                            if ('lat' in point && typeof point.lat === 'number') {
                                lat = point.lat;
                            } else if ('latitude' in point && typeof point.latitude === 'number') {
                                lat = point.latitude;
                            }
                            
                            if ('lng' in point && typeof point.lng === 'number') {
                                lng = point.lng;
                            } else if ('longitude' in point && typeof point.longitude === 'number') {
                                lng = point.longitude;
                            }
                            
                            if (lat !== null && lng !== null) {
                                validRoutePoints.push(L.latLng(lat, lng));
                            }
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ—á–∫–∏
                    if (validRoutePoints.length === 0) {
                        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞');
                    }
                    
                    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
                    if (window.clearMap && typeof window.clearMap === 'function') {
                        window.clearMap();
                    } else {
                        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ä—Ç—ã
                        if (window.routeLayer && map) {
                            map.removeLayer(window.routeLayer);
                            window.routeLayer = null;
                        }
                        if (window.poiMarkers && Array.isArray(window.poiMarkers)) {
                            window.poiMarkers.forEach(marker => map.removeLayer(marker));
                            window.poiMarkers = [];
                        }
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–ª–∏–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
                    window.routeLayer = L.polyline(validRoutePoints, {
                        color: this.getRouteColor(routeData.profile),
                        weight: 4
                    }).addTo(map);
                    
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
                    window.poiMarkers = [];
                    
                    if (routeData.points && routeData.points.length > 0) {
                        routeData.points.forEach((point, index) => {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                            const lat = point.latitude || point.lat;
                            const lng = point.longitude || point.lng;
                            
                            if (typeof lat !== 'number' || typeof lng !== 'number') {
                                console.warn(`–ü—Ä–æ–ø—É—Å–∫ —Ç–æ—á–∫–∏ ${index}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã`, point);
                                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫–∏ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                            }
                            
                            const marker = L.marker([lat, lng], {
                                icon: L.divIcon({
                                    className: 'route-marker-poi',
                                    html: `<div style="
                                        width: 26px;
                                        height: 26px;
                                        border-radius: 50%;
                                        background-color: #2196F3;
                                        display: flex;
                                        justify-content: center;
                                        align-items: center;
                                        color: white;
                                        font-weight: bold;
                                        font-size: 12px;
                                        border: 2px solid white;
                                        box-shadow: 0 0 4px rgba(0,0,0,0.5);">${index + 1}</div>`,
                                    iconSize: [30, 30],
                                    iconAnchor: [15, 15],
                                    popupAnchor: [0, -15]
                                })
                            }).addTo(map);
                            
                            let popupContent = `<b>${point.name || `–¢–æ—á–∫–∞ ${index + 1}`}</b>`;
                            if (point.type && point.type !== 'waypoint') {
                                popupContent += `<br>–¢–∏–ø: ${point.type}`;
                            }
                            if (point.rating) {
                                popupContent += `<br>–†–µ–π—Ç–∏–Ω–≥: ${point.rating}`;
                            }
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                            if (point.photoUrl) {
                                console.log(`–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ—á–∫–∏ ${point.name || `–¢–æ—á–∫–∞ ${index + 1}`}:`, point.photoUrl);
                                
                                let photoUrls = [];
                                
                                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ photoUrl
                                if (typeof point.photoUrl === 'string') {
                                    try {
                                        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, –ø–∞—Ä—Å–∏–º –µ–µ
                                        if (point.photoUrl.startsWith('[') && point.photoUrl.endsWith(']')) {
                                            photoUrls = JSON.parse(point.photoUrl);
                                            console.log('–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', photoUrls);
                                        } else {
                                            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ URL
                                            photoUrls = [point.photoUrl];
                                            console.log('–ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç—Ä–æ–∫—É URL –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é');
                                        }
                                    } catch (e) {
                                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:', e);
                                        photoUrls = [point.photoUrl]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π URL
                                    }
                                } else if (Array.isArray(point.photoUrl)) {
                                    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –º–∞—Å—Å–∏–≤
                                    photoUrls = point.photoUrl;
                                    console.log('–ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', photoUrls);
                                } else if (point.photoUrl) {
                                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É:', point.photoUrl);
                                    photoUrls = [point.photoUrl.toString()];
                                }
                                
                                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                if (photoUrls.length > 0) {
                                    popupContent += `<br><img src="${photoUrls[0]}" alt="${point.name || `–¢–æ—á–∫–∞ ${index + 1}`}" 
                                                     style="max-width: 200px; max-height: 150px; margin-top: 5px; 
                                                     border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">`;
                                }
                            }
                            
                            marker.bindPopup(popupContent);
                            window.poiMarkers.push(marker);
                        });
                    }
                    
                    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                    if (window.routeLayer) {
                        try {
                            map.fitBounds(window.routeLayer.getBounds());
                        } catch (e) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', e);
                            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–∞, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ
                            if (validRoutePoints.length > 0) {
                                map.setView(validRoutePoints[0], 13);
                            }
                        }
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
                    this.updateRouteInfo(routeData);
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                    this.setActiveProfile(routeData.profile);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞:', error);
                    NeoDialog.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ${error.message}`);
                }
            })
            .catch(error => {
                // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                if (document.getElementById('route-loading-indicator')) {
                    document.body.removeChild(document.getElementById('route-loading-indicator'));
                }
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
                NeoDialog.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞: ${error.message}`);
            });
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    deleteRoute(userId, routeId, routeItemElement) {
        console.log(`–£–¥–∞–ª—è—é –º–∞—Ä—à—Ä—É—Ç —Å ID: ${routeId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingIndicator = document.createElement('div');
        loadingIndicator.id = 'delete-loading-indicator';
        loadingIndicator.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 10px;
            z-index: 1000;
            text-align: center;
        `;
        loadingIndicator.innerHTML = '–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...';
        document.body.appendChild(loadingIndicator);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        fetch(`/api/users/${userId}/routes/${routeId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (document.getElementById('delete-loading-indicator')) {
                document.body.removeChild(document.getElementById('delete-loading-indicator'));
            }
            
            if (!response.ok) {
                if (response.headers.get('content-type')?.includes('application/json')) {
                    return response.json().then(data => {
                        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
                    });
                } else {
                    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ${response.status} ${response.statusText}`);
                }
            }
            
            console.log(`–ú–∞—Ä—à—Ä—É—Ç ${routeId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
            
            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            routeItemElement.style.height = routeItemElement.offsetHeight + 'px';
            routeItemElement.style.transition = 'all 0.3s ease';
            
            setTimeout(() => {
                routeItemElement.style.height = '0';
                routeItemElement.style.opacity = '0';
                routeItemElement.style.margin = '0';
                routeItemElement.style.padding = '0';
                
                setTimeout(() => {
                    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
                    if (routeItemElement.parentNode) {
                        routeItemElement.parentNode.removeChild(routeItemElement);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –º–∞—Ä—à—Ä—É—Ç—ã
                        const routesList = document.getElementById('saved-routes-list');
                        const remainingRoutes = routesList?.querySelectorAll('.saved-route-item');
                        
                        if (!remainingRoutes || remainingRoutes.length === 0) {
                            console.log('–ë–æ–ª—å—à–µ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∑–∞–∫—Ä—ã–≤–∞—é –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
                            
                            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                            const modal = document.getElementById('saved-routes-modal');
                            if (modal) {
                                document.body.removeChild(modal);
                                NeoDialog.alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã', '–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤');
                            }
                        }
                    }
                }, 300);
            }, 10);
        })
        .catch(error => {
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (document.getElementById('delete-loading-indicator')) {
                document.body.removeChild(document.getElementById('delete-loading-indicator'));
            }
            
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
            NeoDialog.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ${error.message}`);
        });
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    getRouteColor(profile) {
        switch (profile) {
            case 'foot':
                return '#3949AB'; // Indigo –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
            case 'bike':
                return '#00897B'; // Teal –¥–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
            case 'car':
                return '#E64A19'; // Deep Orange –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
            default:
                return '#3F51B5';
        }
    }
    
    updateRouteInfo(routeData) {
        const routeInfoPanel = document.getElementById('route-info');
        const infoDistance = document.getElementById('info-distance');
        const infoTime = document.getElementById('info-time');
        const routeType = document.getElementById('route-type');
        
        if (routeInfoPanel && infoDistance && infoTime) {
            infoDistance.textContent = routeData.distance.toFixed(2);
            infoTime.textContent = routeData.duration;
            
            if (routeType) {
                routeType.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π';
                routeType.style.color = '#4285f4';
            }
            
            routeInfoPanel.style.display = 'block';
        }
    }
    
    setActiveProfile(profile) {
        const profileButtons = document.querySelectorAll('#profile-buttons button');
        
        profileButtons.forEach(button => {
            button.classList.remove('active');
            
            if (button.id === `profile-${profile}`) {
                button.classList.add('active');
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        if (window.currentProfile !== undefined) {
            window.currentProfile = profile;
        }
    }
    
    showPreferences() {
        NeoDialog.alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
     * @param {Object} routeData - –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ
     * @param {Array} poisData - –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—á–∫–∞—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
     */
    async saveCurrentRoute(routeData, poisData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (!this.isAuthenticated) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º NeoDialog.confirm –Ω–∞–ø—Ä—è–º—É—é —Å Promise
            return new Promise(resolve => {
                NeoDialog.confirm('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ —Å–µ–π—á–∞—Å?', result => {
                    if (result) {
                        window.location.href = '/login';
                    }
                    resolve(false);
                });
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
        if (!routeData || !routeData.points || routeData.points.length === 0) {
            NeoDialog.alert('–û—à–∏–±–∫–∞', '–î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            return;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è NeoDialog.prompt –Ω–∞–ø—Ä—è–º—É—é
        return new Promise(resolve => {
            NeoDialog.prompt('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:', '', routeName => {
                if (!routeName || routeName.trim() === '') {
                    NeoDialog.alert('–û—à–∏–±–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                    resolve(false);
                    return;
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
                this._saveRouteWithName(routeData, poisData, routeName);
                resolve(true);
            });
        });
    }

    // –ù–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º
    _saveRouteWithName(routeData, poisData, routeName) {
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–µ—é—Ç —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø
        const safeRouteData = {
            name: routeName,
            distance: parseFloat(routeData.distance) || 0,
            time: parseInt(routeData.time) || 0,
            profile: routeData.profile || 'foot',
            createdAt: new Date().toISOString(),
            points: routeData.points
        };
        
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = this.userProfile.id;
        
        // –°–æ–∑–¥–∞–µ–º JSON-–æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const saveData = {
            name: routeName,
            profile: safeRouteData.profile,
            distance: safeRouteData.distance,
            duration: safeRouteData.time,
            routeData: JSON.stringify({
                points: safeRouteData.points
            }),
            pointsData: poisData.map((poi, index) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ POI, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                let rating = null;
                if (poi.rating !== undefined && poi.rating !== null) {
                    // –ï—Å–ª–∏ rating —Å—Ç—Ä–æ–∫–∞ "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", —Ç–æ null, –∏–Ω–∞—á–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    rating = poi.rating === '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' ? null : parseFloat(poi.rating) || null;
                }
                
                return {
                    latitude: parseFloat(poi.lat) || 0,
                    longitude: parseFloat(poi.lng) || 0,
                    name: poi.name || `–¢–æ—á–∫–∞ ${index + 1}`,
                    type: poi.type || 'waypoint',
                    rating: rating,
                    sequenceOrder: index
                };
            })
        };
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', saveData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingDiv = document.createElement('div');
        loadingDiv.id = 'route-saving-indicator';
        loadingDiv.className = 'neo-modal-container';
        loadingDiv.innerHTML = `
            <div style="
                background-color: var(--background);
                padding: 20px;
                border-radius: 15px;
                box-shadow: 10px 10px 20px var(--shadow-dark), -10px -10px 20px var(--shadow-light);
                text-align: center;
            ">
                <div style="
                    border: 4px solid var(--shadow-dark);
                    border-top: 4px solid var(--accent-color);
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    margin: 0 auto 15px auto;
                    animation: spin 1s linear infinite;
                "></div>
                <div>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...</div>
            </div>
        `;
        document.body.appendChild(loadingDiv);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch(`/api/users/${userId}/routes`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(saveData)
        })
        .then(response => {
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (document.getElementById('route-saving-indicator')) {
                document.body.removeChild(document.getElementById('route-saving-indicator'));
            }
            
            if (!response.ok) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return response.json().then(data => {
                        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
                    });
                } else {
                    return response.text().then(text => {
                        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ${response.status} - ${text || response.statusText}`);
                    });
                }
            }
            return response.json();
        })
        .then(data => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º NeoDialog.alert –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ alert
            NeoDialog.alert('–£—Å–ø–µ—à–Ω–æ', `–ú–∞—Ä—à—Ä—É—Ç "${routeName}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);
            console.log('–ú–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', data);
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º NeoDialog.alert –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ alert
            NeoDialog.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ${error.message}`);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', () => {
    window.personalizationModule = new PersonalizationModule();
}); 